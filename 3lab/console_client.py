import argparse
import requests
import websockets
import asyncio
import json
import sys
import uuid
from datetime import datetime

# –¢–µ—Å—Ç–æ–≤—ã–π MD5 —Ö–µ—à –¥–ª—è —Å–ª–æ–≤–∞ "test" = 098f6bcd4621d373cade4e832627b4f6
TEST_HASH = "098f6bcd4621d373cade4e832627b4f6"
HTTP_URL = "http://localhost:8000"
WS_URL = "ws://localhost:8000"

def print_message(message, message_type=None):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    timestamp = datetime.now().strftime("%H:%M:%S")
    print(f"[{timestamp}] {message}")

async def connect_websocket(client_id):
    """
    –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    """
    uri = f"{WS_URL}/ws/{client_id}"
    try:
        async with websockets.connect(
            uri,
            ping_interval=20,  # –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 20 —Å–µ–∫—É–Ω–¥
            ping_timeout=60,   # –ñ–¥–∞—Ç—å –ø–æ–Ω–≥ 60 —Å–µ–∫—É–Ω–¥
            close_timeout=60   # –ñ–¥–∞—Ç—å –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è 60 —Å–µ–∫—É–Ω–¥
        ) as websocket:
            print_message("üîå WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø–∏–Ω–≥–∞
            ping_task = asyncio.create_task(keep_alive(websocket))
            
            try:
                while True:
                    try:
                        message = await websocket.recv()
                        data = json.loads(message)
                        print_message(data.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"))
                        
                        # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏, –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª
                        msg_type = data.get("type", "")
                        if msg_type in ["success", "not_found", "error"]:
                            break
                    except json.JSONDecodeError as e:
                        print_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON: {e}")
                    except websockets.exceptions.ConnectionClosed:
                        print_message("‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ —Å–µ—Ä–≤–µ—Ä–æ–º")
                        break
                    except Exception as e:
                        print_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                        break
            finally:
                # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É –ø–∏–Ω–≥–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
                ping_task.cancel()
                try:
                    await ping_task
                except asyncio.CancelledError:
                    pass
    except Exception as e:
        print_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket: {e}")

async def keep_alive(websocket):
    """
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–º —Å –ø–æ–º–æ—â—å—é –ø–∏–Ω–≥–æ–≤
    """
    try:
        while True:
            await asyncio.sleep(20)  # –ü–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 20 —Å–µ–∫—É–Ω–¥
            try:
                pong = await websocket.ping()
                await pong
            except:
                return
    except asyncio.CancelledError:
        pass

def start_bruteforce(hash_to_crack, client_id):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –Ω–∞—á–∞–ª–æ –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞
    """
    url = f"{HTTP_URL}/start"
    data = {
        "hash_to_crack": hash_to_crack,
        "client_id": client_id
    }
    try:
        response = requests.post(url, json=data)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None

def main():
    parser = argparse.ArgumentParser(description="–ö–ª–∏–µ–Ω—Ç –¥–ª—è –±—Ä—É—Ç—Ñ–æ—Ä—Å API")
    parser.add_argument("hash", help="MD5 —Ö–µ—à –¥–ª—è –≤–∑–ª–æ–º–∞")
    parser.add_argument("--client-id", default=str(uuid.uuid4()), help="ID –∫–ª–∏–µ–Ω—Ç–∞")
    
    args = parser.parse_args()
    
    try:
        print_message(f"üéØ –ù–∞—á–∏–Ω–∞–µ–º –≤–∑–ª–æ–º —Ö–µ—à–∞: {args.hash}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä—É—Ç—Ñ–æ—Ä—Å
        result = start_bruteforce(args.hash, args.client_id)
        if result is None:
            print_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä—É—Ç—Ñ–æ—Ä—Å")
            return
        
        print_message(f"‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–ø—É—â–µ–Ω–∞: {result.get('task_id')}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket –∫–ª–∏–µ–Ω—Ç
        asyncio.run(connect_websocket(args.client_id))
    except KeyboardInterrupt:
        print_message("\n‚õîÔ∏è –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    except Exception as e:
        print_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
    finally:
        print_message("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞")

if __name__ == "__main__":
    main() 