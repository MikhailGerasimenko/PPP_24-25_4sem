import time
import itertools
import string
import hashlib
import json
from typing import Optional
from celery import shared_task
from app.core.redislite_init import redis_instance
from app.celery.celery_app import celery_app
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

NOTIFICATION_CHANNEL = "ws_notifications"

@shared_task(name='app.celery.tasks.bruteforce_task')
def bruteforce_task(hash_to_crack: str, client_id: str):
    """
    –ó–∞–¥–∞—á–∞ –¥–ª—è –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞ MD5 —Ö–µ—à–∞
    """
    try:
        logger.info(f"–ù–∞—á–∞–ª–æ –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞ –¥–ª—è —Ö–µ—à–∞ {hash_to_crack} (–∫–ª–∏–µ–Ω—Ç: {client_id})")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏ —Å—Ç—Ä–æ—á–Ω—ã–µ –∏ –ø—Ä–æ–ø–∏—Å–Ω—ã–µ –±—É–∫–≤—ã
        characters = string.ascii_letters + string.digits
        max_length = 5  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è
        
        # –ü—É–±–ª–∏–∫—É–µ–º –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
        start_message = {
            "client_id": client_id,
            "message": "üîç –ù–∞—á–∏–Ω–∞—é –±—Ä—É—Ç—Ñ–æ—Ä—Å...",
            "type": "start"
        }
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Redis: {start_message}")
        redis_instance.publish(NOTIFICATION_CHANNEL, json.dumps(start_message))

        total_attempts = 0
        for length in range(1, max_length + 1):
            logger.info(f"–ü–µ—Ä–µ–±–æ—Ä –ø–∞—Ä–æ–ª–µ–π –¥–ª–∏–Ω—ã {length}")
            for guess in itertools.product(characters, repeat=length):
                password = ''.join(guess)
                guess_hash = hashlib.md5(password.encode()).hexdigest()
                
                total_attempts += 1
                if total_attempts % 1000 == 0:  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 1000 –ø–æ–ø—ã—Ç–æ–∫
                    progress_message = {
                        "client_id": client_id,
                        "message": f"‚ö°Ô∏è –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {total_attempts} –ø–∞—Ä–æ–ª–µ–π. –¢–µ–∫—É—â–∏–π: {password}",
                        "type": "progress"
                    }
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ Redis: {progress_message}")
                    redis_instance.publish(NOTIFICATION_CHANNEL, json.dumps(progress_message))
                
                if guess_hash == hash_to_crack:
                    # –ù–∞–π–¥–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å
                    result = f"‚úÖ –ü–∞—Ä–æ–ª—å –Ω–∞–π–¥–µ–Ω: {password} (–ø–æ—Å–ª–µ {total_attempts} –ø–æ–ø—ã—Ç–æ–∫)"
                    success_message = {
                        "client_id": client_id,
                        "message": result,
                        "type": "success"
                    }
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ Redis: {success_message}")
                    redis_instance.publish(NOTIFICATION_CHANNEL, json.dumps(success_message))
                    return password
        
        # –ü–∞—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
        not_found_message = {
            "client_id": client_id,
            "message": f"‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ {total_attempts} –ø–æ–ø—ã—Ç–æ–∫",
            "type": "not_found"
        }
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ—É–¥–∞—á–µ –≤ Redis: {not_found_message}")
        redis_instance.publish(NOTIFICATION_CHANNEL, json.dumps(not_found_message))
        return None
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        error_message = {
            "client_id": client_id,
            "message": f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
            "type": "error"
        }
        redis_instance.publish(NOTIFICATION_CHANNEL, json.dumps(error_message))
        raise

# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Ñ–∞–π–ª–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ... 